[tox]

envlist =
    flake8, mypy
    coverage-py{36,37,38,py3}
    coverage_report
    packaging

skip_missing_interpreters = {tty:True:False}


##
# Build (default environment)
##

[testenv]

description = run tests

basepython =
    py:   python
    py36: python3.6
    py37: python3.7
    py38: python3.8
    py39: python3.9
    pypy3: pypy3

deps =
    {test,coverage}: hypothesis==4.43.8
    coverage: coverage==4.5.4

passenv =
    {test,coverage}: CI

    # See https://github.com/codecov/codecov-python/blob/master/README.md#using-tox
    # And CI-specific docs:
    #   https://help.github.com/en/articles/virtual-environments-for-github-actions#default-environment-variables
    #   https://docs.travis-ci.com/user/environment-variables#default-environment-variables
    #   https://www.appveyor.com/docs/environment-variables/
    codecov: TOXENV CODECOV_* CI
    codecov: GITHUB_*
    codecov: TRAVIS TRAVIS_*
    codecov: APPVEYOR APPVEYOR_*

setenv =
    PY_MODULE=deploy

    {test,coverage}: PYTHONPYCACHEPREFIX={envtmpdir}/pycache

    coverage: COVERAGE_FILE={toxworkdir}/coverage.{envname}
    codecov: COVERAGE_FILE={toxworkdir}/coverage

    codecov: COVERAGE_XML={envlogdir}/coverage_report.xml

commands =
    # Run trial without coverage
    test: trial --random=0 --logfile="{envlogdir}/trial.log" --temp-directory="{envlogdir}/trial.d" {posargs:{env:PY_MODULE}}

    # Run trial with coverage
    coverage: coverage run --source {env:PY_MODULE} "{envdir}/bin/trial" --random=0 --logfile="{envlogdir}/trial.log" --temp-directory="{envlogdir}/trial.d" {posargs:{env:PY_MODULE}}

    # Run coverage reports, ignore exit status
    coverage: - coverage report --skip-covered


##
# Flake8 linting
##

[testenv:flake8]

description = run Flake8 (linter)

basepython = python3.8

skip_install = True

# Pin pydocstyle to version 3: see https://gitlab.com/pycqa/flake8-docstrings/issues/36
deps =
    flake8-bugbear==19.8.0
    flake8-docstrings==1.5.0
    flake8-import-order==0.18.1
    flake8-pep3101==1.2.1
    flake8==3.7.9
    mccabe==0.6.1
    pep8-naming==0.9.0
    pydocstyle==4.0.1
    # pin pyflakes pending a release with https://github.com/PyCQA/pyflakes/pull/455
    git+git://github.com/PyCQA/pyflakes@ffe9386#egg=pyflakes

commands =
    flake8 {posargs:src/{env:PY_MODULE}}


[flake8]

# !!! BRING THE PAIN !!!
select = A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z

disable-noqa = True
show-source  = True
doctests     = True

# Codes: http://flake8.pycqa.org/en/latest/user/error-codes.html
ignore =
    # One-line docstring should fit on one line with quotes
    D200,

    # 1 blank line required between summary line and description
    D205,

    # First line should end with a period
    D400,

    # First line should be in imperative mood
    D401,

    # whitespace before '}'
    E202,

    # multiple spaces before operator
    E221,

    # multiple spaces after ':'
    E241,

    # expected 1 blank lines
    E301,

    # expected 2 blank lines
    E302,

    # too many blank lines
    E303,

    # expected 2 blank lines after class or function definition
    E305,

    # f-string is missing placeholders
    F999,

    # function name should be lowercase
    N802,

    # argument name should be lowercase
    N803,

    # first argument of a method should be named 'self'
    N805,

    # variable in function should be lowercase
    N806,

    # lowercase imported as non lowercase
    N812,

    # variable in class scope should not be mixedCase
    N815,

    # variable in global scope should not be mixedCase
    N816,

    # line break before binary operator
    W503,

    # line break after binary operator
    W504,

    # End of list (allows last item to end with trailing ',')
    EOL

# flake8-import-order: local module name space
application-import-names = deploy

# McCabe complexity checker
max-complexity = 23



##
# Mypy static type checking
##

[testenv:mypy]

description = run Mypy (static type checker)

basepython = python3.8

skip_install = True


deps =
    mypy==0.740


commands =
    mypy                                       \
        --config-file="{toxinidir}/tox.ini"    \
        --cache-dir="{toxworkdir}/mypy_cache"  \
        {tty:--pretty:}                        \
        {posargs:src}


[mypy]

# Global settings

disallow_incomplete_defs = True
disallow_untyped_defs    = True
no_implicit_optional     = True
show_column_numbers      = True
show_error_codes         = True
strict_optional          = True
warn_no_return           = True
warn_redundant_casts     = True
warn_return_any          = True
warn_unreachable         = True
warn_unused_ignores      = True

# Enable these over time
check_untyped_defs       = False

# Don't complain about dependencies known to lack type hints

[mypy-arrow.*]
ignore_missing_imports = True

[mypy-boto3]
ignore_missing_imports = True

[mypy-docker]
ignore_missing_imports = True
[mypy-docker.*]
ignore_missing_imports = True

[mypy-git]
ignore_missing_imports = True

[mypy-hypothesis]
ignore_missing_imports = True
[mypy-hypothesis.*]
ignore_missing_imports = True

[mypy-twisted.*]
ignore_missing_imports = True



##
# Coverage report
##

[testenv:coverage_report]

description = generate coverage report

basepython = python

skip_install = True

deps =
    coverage==4.5.4

commands =
    coverage combine
    coverage report
    coverage html


##
# Codecov
##

[testenv:codecov]

description = upload coverage to Codecov

basepython = python

skip_install = True

deps =
    coverage==4.5.4
    codecov==2.0.15

commands =
    # Note documentation for CI variables in default environment's passenv

    coverage combine
    coverage xml -o "{env:COVERAGE_XML}"
    codecov --file="{env:COVERAGE_XML}" --env                 \
        GITHUB_REF GITHUB_COMMIT GITHUB_USER GITHUB_WORKFLOW  \
        TRAVIS_BRANCH TRAVIS_BUILD_WEB_URL                    \
        TRAVIS_COMMIT TRAVIS_COMMIT_MESSAGE                   \
        APPVEYOR_REPO_BRANCH APPVEYOR_REPO_COMMIT             \
        APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL                     \
        APPVEYOR_REPO_COMMIT_MESSAGE_EXTENDED



##
# Packaging
##

[testenv:packaging]

description = check for potential packaging problems

basepython = python

deps =
   check-manifest==0.40
   readme_renderer==24.0

commands =
   check-manifest
   python setup.py check --metadata --restructuredtext --strict


##
# Print dependencies
##

[testenv:dependencies]

description = print dependencies

basepython = python3.8

recreate = true

deps =

commands =
    pip freeze
